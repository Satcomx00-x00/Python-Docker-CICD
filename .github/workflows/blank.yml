name: CI/CD Pipeline
on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: List Repository Contents
        run: |
          echo "Repository contents:"
          ls -la
          echo "\nCogs directory contents:"
          ls -la cogs/

      - id: commit
        run: |
          MSG=$(git log -1 --pretty=%B)
          SHA=$(git rev-parse --short HEAD)
          echo "Commit message: $MSG"
          echo "Commit SHA: $SHA"
          echo "msg=$MSG" >> $GITHUB_OUTPUT
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - id: version
        run: |
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Current tag: $CURRENT_TAG"
          IFS='.' read -r MAJOR MINOR PATCH <<< "${CURRENT_TAG#v}"
          echo "Current version: $MAJOR.$MINOR.$PATCH"
          
          case "${{ steps.commit.outputs.msg }}" in
            major:*) 
              NEW_TAG="v$((MAJOR + 1)).0.0"
              echo "Major version bump" ;;
            minor:*) 
              NEW_TAG="v$MAJOR.$((MINOR + 1)).0"
              echo "Minor version bump" ;;
            release:*) 
              NEW_TAG="v$MAJOR.$MINOR.$((PATCH + 1))"
              echo "Patch version bump" ;;
            *) 
              NEW_TAG=""
              echo "No version bump needed" ;;
          esac
          
          if [ ! -z "$NEW_TAG" ]; then
            if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
              echo "Tag $NEW_TAG exists, incrementing patch"
              IFS='.' read -r M N P <<< "${NEW_TAG#v}"
              NEW_TAG="v$M.$N.$((P + 1))"
            fi
            echo "Creating new tag: $NEW_TAG"
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git tag $NEW_TAG
            git push origin $NEW_TAG
            echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "No tag created, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Create infos.json
        if: steps.version.outputs.should_build == 'true'
        run: |
          echo '{
            "version": "${{ steps.version.outputs.tag }}",
            "commit_sha": "${{ steps.commit.outputs.sha }}",
            "build_date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
          }' > infos.json
          echo "Created infos.json with content:"
          cat infos.json

      - name: Docker Setup
        if: steps.version.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: DockerHub Login
        if: steps.version.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        if: steps.version.outputs.should_build == 'true'
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ steps.version.outputs.tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest

      - name: Update Portainer Stack
        if: steps.version.outputs.should_build == 'true'
        run: |
          echo "Updating Portainer stack..."
          WEBHOOK_URL="${{ secrets.PORTAINER_WEBHOOK }}?pullimage=true&tag=latest"
          echo "Using webhook: $WEBHOOK_URL"
          
          curl --insecure -X POST "$WEBHOOK_URL" || {
            echo "First attempt failed, retrying with -k flag..."
            curl -k -X POST "$WEBHOOK_URL"
          }
